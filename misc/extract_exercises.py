# IMPORTS
import re

# CONSTANTS
RELATIVE_PATH = "../book"

# FUNCTIONS
def read_latex_file(path):
    with open(path, "r") as f:
        return f.read()


def get_chapter_files(part_num, ex_or_prob, chapter_id):
    chapter_text = read_latex_file(f"{RELATIVE_PATH}/part{part_num}/{chapter_id}.tex")
    solutions_text = read_latex_file(f"{RELATIVE_PATH}/part{part_num}/{ex_or_prob}-solutions/{chapter_id}.tex")

    return chapter_text, solutions_text

def extract_exercises_and_solutions(ex_or_prob, chapter_text, solutions_text):
    chapter_pattern = re.compile(rf"\\begin{{{ex_or_prob}}}(\[.+\])?(\\index\{{.+\}})?(\\label\{{.+\}})?(?P<content>(.|\s)+?)\\end{{{ex_or_prob}}}", re.MULTILINE)
    solutions_pattern = re.compile(r" {4}\\item(?P<answer>((.|\s)(?!\n {4}\\item)(?!\\end{questions}))+)", re.MULTILINE)

    exercises = []
    for match in chapter_pattern.finditer(chapter_text):
        exercises.append(match.group("content"))

    solutions = []
    for match in solutions_pattern.finditer(solutions_text):
        solutions.append(match.group("answer"))

    return exercises, solutions


def write_exercises_and_solutions(exercises, solutions):
    output = ""
    num = len(exercises)
    # print(solutions)
    # print(num, len(solutions))
    for i in range(num):
        output += "\\begin{mdframed}"
        output += exercises[i].rstrip()
        output += "\n\\end{mdframed}\n\\textbf{Solution}:\\newline\n"
        output += solutions[i]
        output += "\n"
    
    return output


def write_chapter(part_num, chapter_id):
    output = f"\n\\chapter{{{chapter_id.replace('-', ' ').title()}}}"
    print(part_num, chapter_id)

    for ex_or_prob in ["exercise", "problem"]:
        output += f"\n\\section*{{{ex_or_prob.title()}s}}\n"
        chapter_text, solutions_text = get_chapter_files(part_num, ex_or_prob, chapter_id)
        exercises, solutions = extract_exercises_and_solutions(ex_or_prob, chapter_text, solutions_text)
        output += write_exercises_and_solutions(exercises, solutions)
    
    return output

def get_chapters(book_path):
    with open(book_path, "r") as f:
        content = f.read()
    
    chapter_pattern = re.compile(r"\\include{part(?P<part_num>\d)/(?P<chapter_id>(?!preamble)([\w-]+))}")

    chapters = []
    for match in chapter_pattern.finditer(content):
        chapters.append((match.group("part_num"), match.group("chapter_id")))
    
    return chapters


def generate_exercises_and_solutions(book_path):
    # Get all chapters
    chapters = get_chapters(book_path)

    output = ""
    for part_num, chapter_id in chapters:
        output += write_chapter(part_num, chapter_id)

    return output


# MAIN CODE
autogen_code = generate_exercises_and_solutions(f"{RELATIVE_PATH}/book.tex")

with open(f"{RELATIVE_PATH}/exercises-only.tex", "r") as f:
    content = f.read()

replace_pattern = re.compile(r"% START OF AUTOGENERATED CONTENT\n(?P<content>(.|\s)+)\n% END OF AUTOGENERATED CONTENT")

content = re.sub(replace_pattern, "% START OF AUTOGENERATED CONTENT\n% END OF AUTOGENERATED CONTENT", content)
content = content.replace("% START OF AUTOGENERATED CONTENT\n% END OF AUTOGENERATED CONTENT", f"% START OF AUTOGENERATED CONTENT\n{autogen_code}\n% END OF AUTOGENERATED CONTENT")

with open(f"{RELATIVE_PATH}/exercises-only.tex", "w") as f:
    f.write(content)
